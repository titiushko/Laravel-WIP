ALLOW_DEBUGGER["TINYMCE_PLUGIN"] = false;

tinymce.PluginManager.add("contractstandards", function (editor, url) {
    if (ALLOW_DEBUGGER.TINYMCE_PLUGIN) debugger;
    var $TINYMCE_EDITOR = tinymce.dom.DomQuery;
    var $ACTIVE_EDITOR = tinymce.activeEditor;

    function getElement($ELEMENT, hasExtraRegex, isPromote) {
        var element = {
            closest: null,
            levelClass: null,
            level: null,
            nextLevel: null
        };

        var regex = hasExtraRegex ? "L[0-9]{1,2}" : "L[0-9]";

        element.closest = $ELEMENT.closest("[class*='L']"); // Capture closest L class
        element.levelClass = $TINYMCE_EDITOR(element.closest).attr("class");
        element.level = element.levelClass != undefined && element.levelClass != "" ? (element.levelClass.match(regex) != null ? element.levelClass.match(regex).toString() : "0") : "0";   // Pull out the number from that class (e.g., L2, L3, etc)
        if (hasExtraRegex) {
            element.level = element.level.match("[0-9]{1,2}");
        }

        if (isPromote) {
            // Since we are promoting here, we need to check if we are at L1
            // If we are, we do not want to go back to L0, so the function just returns 1
            // Otherwise, it returns the current L# - 1
            element.nextLevel = function () {
                var level = parseInt(element.level);

                if (level > 1) {
                    return level - 1;
                }
                else {
                    return 1
                }
            };
        }
        else {
            element.nextLevel = parseInt(element.level) + 1;  // Go up one class number
        }

        return element;
    }

    function toggleOutline() {
        if (ALLOW_DEBUGGER.TINYMCE_PLUGIN) debugger;

        var $ELEMENT = $ACTIVE_EDITOR.selection.getNode();  // Get node with cursor
        if ($TINYMCE_EDITOR($ELEMENT).hasClass("numbered") || $TINYMCE_EDITOR($ELEMENT).parent().hasClass("numbered")) {
            removeOutline();
        }
        else {
            outline();
        }
    }

    function outline() {
        if (ALLOW_DEBUGGER.TINYMCE_PLUGIN) debugger;

        var $ELEMENT = $ACTIVE_EDITOR.selection.getNode();  // Get node with cursor
        if ($TINYMCE_EDITOR($ELEMENT).is("p")) {
            $TINYMCE_EDITOR($ELEMENT).addClass("numbered");
        }
        else if ($TINYMCE_EDITOR($ELEMENT).is("b,strong") || $TINYMCE_EDITOR($ELEMENT).css("font-weight") == "bold") {
            var element = $ELEMENT.closest("p");
            $TINYMCE_EDITOR(element).addClass("numbered");
        }
    };

    function removeOutline() {
        if (ALLOW_DEBUGGER.TINYMCE_PLUGIN) debugger;

        var $ELEMENT = $ACTIVE_EDITOR.selection.getNode();  // Get node with cursor
        var element = getElement($ELEMENT, false, false);

        $TINYMCE_EDITOR(element.closest).removeClass("numbered");
    };

    function demote() {
        if (ALLOW_DEBUGGER.TINYMCE_PLUGIN) debugger;

        var $ELEMENT = $ACTIVE_EDITOR.selection.getNode();  // Get node with cursor
        var element = getElement($ELEMENT, true, false);

        $TINYMCE_EDITOR(element.closest).removeClass("L" + parseInt(element.level));    // Remove previous L class
        $TINYMCE_EDITOR(element.closest).addClass("L" + element.nextLevel);   // Add new class number
    };

    function promote() {
        if (ALLOW_DEBUGGER.TINYMCE_PLUGIN) debugger;

        var $ELEMENT = $ACTIVE_EDITOR.selection.getNode();  // Get node with cursor
        var element = getElement($ELEMENT, true, true);

        $TINYMCE_EDITOR(element.closest).removeClass("L" + parseInt(element.level)).addClass("L" + element.nextLevel());   // Swap out old L class with new one
    };

    // This function addresses a quirk in the benchmark html. The first p element in a div block does not usually have an L class
    // As a result, applying outline numbering and promoting/demoting can be awkward
    // This code adds the parent's L class in, smoothing out the issues created by the previously missing L class
    function noClassP() {
        if (ALLOW_DEBUGGER.TINYMCE_PLUGIN) debugger;

        $($ACTIVE_EDITOR.dom.select("p:first-child")).each(function () {
            if (ALLOW_DEBUGGER.TINYMCE_PLUGIN) debugger;

            var parentClass = $(this).parent().attr("class");
            var levelClass = parentClass != undefined && parentClass != "" ? (parentClass.match("L[0-9]") != null ? parentClass.match("L[0-9]").toString() : "0") : "0";
            $(this).not("[class*='L']").addClass("L" + levelClass);
        });

        $.each($ACTIVE_EDITOR.dom.select("p"), function () {
            if (ALLOW_DEBUGGER.TINYMCE_PLUGIN) debugger;

            $(this).not("[class*='L']").addClass("L1");
        });
    };

    // If a standard or alternative clause textarea is empty, this function prepopulates to area with the p.L1 > span.pid elements
    // You can just start writing without having to worry about default CS html formatting
    function loadContentEvent(event) {
        if (ALLOW_DEBUGGER.TINYMCE_PLUGIN) debugger;

        if ($ACTIVE_EDITOR.getContent() === "") {
            $ACTIVE_EDITOR.setContent("<p class='L1 numbered'>&nbsp;</p>");
        }

        noClassP();
    }

    // If a standard or alternative clause textarea is empty, this function prepopulates to area with the p.L1 > span.pid elements
    // You can just start writing without having to worry about default CS html formatting
    editor.on("LoadContent", function (e) {
        loadContentEvent(e);
    });

    // If the key is a tab (keyCode = 9), the function preventsDefault so the cursor will stay in the textarea
    // This allows the user to promote/demote clauses with shift+tab and tab respectively
    editor.on("keydown", function (e) {
        if (e.keyCode == 9) {
            e.preventDefault();
        };
    });

    // Enables promote and demote with shift + tab and tab. Keeps and updates L and pid classes
    editor.on("keyup", function (e) {
        if (e.shiftKey && e.keyCode == 9) { // shift + tab
            promote();
        }
        else if (e.keyCode == 9) {    // tab only
            demote();
        }
    });

    editor.addButton("outline", {
        tooltip: "Add Outline",
        icon: "numlist",
        stateSelector: ".numbered",
        onclick: function () {
            toggleOutline();
        }
    });

    editor.addButton("demote", {
        tooltip: "Demote Clause (Tab)",
        icon: "indent",
        onclick: function () {
            demote();
        }
    });

    editor.addButton("promote", {
        tooltip: "Promote Clause (Shift + Tab)",
        icon: "outdent",
        onclick: function () {
            promote();
        }
    });
});
